Model:

UniformShaderParam - generyczny runtajmowy parametr do shadera odpowiadający za uniform variable w shaderze
                     składa się z deskryptora (kwalifikowaną nazwa parametru, która jest używana w kodzie shadera jako uniform variable, typ parametru:
                     float, float1, float2, float3, float4, mat2, mat3, mat4, int, bool oraz rozmiar parametru (sizeof)), 
                     nieotypowanego bufora, który trzyma te dane (char*) - na podstawie deskryptora można ten bufor ustawić oraz wskaźnik na updater,
                     który potrafi poprawnie ustawić ten parametr - na podstawie modelu ustawaia wartość paramtru shadera po stronie modelu (opisane dalej)
                     metoda Update tego parametru wywołuje zarejestrowany updater na sobie - w założeniu ten uprader ma być w stanie poprawnie ustawić
                     wartość danego parametru
                     
ShaderTextureParameters - Stores either textures or animations - not the best implementation though (at this point at most one animation anyway)

ShaderParameters - klasa, która przechowuje parametry shadera (uniformy oraz tekstury) po stronie modelu i potem je pozwala wrzucać do shadera po stronie silnika
                   trzyma listę GenericShaderParam oraz ShaderTextureParameters oraz wskaźnik na shader, do którego te parametry należą (sensowne)
                   do tego pozwala na dostawanie się do poszczególnych parametrów przez nazwę i indeks oraz generyczne ustawianie wartości (z danych
                   zapisanych jako char *) - SetValue. Ma też swoją metodę Update, która odpala update na każdym UbniformShaderParam (ale na teksturach
                   już nie) - ten update w każdym
                   
ShaderParamFactory - klaska służąca do tworzenia parametrów odpowiedniego typu na podstawie nazwy i paramtype, dodatkowo potrafi alokować bufor dla
                     poszczególnych parametrów (pewnie należałoby tutaj dodać jakiś mempool, a nie na pałę alokować te małe fragmenty pamięci, ewentualnie
                     zawsze statycznie przydzielać każdemu parametrowi 16 floatów (mat4) i się nie przejmować, ale to jest nieco marnowanie miejsca)
     
RendererContext - kontekst renderera (stany alfa, cull, depth i fill)
     
IShaderChannel - interfejs, która dziedziczy po IUpdatable (Update) -> IChannel (IsReadOnly() ) -> IShaderChannel (GetShaderFile, GetValuesList, GetParametersList)

IVertexShaderChannel - to samo, co IShaderChannel
IGeometryShaderChannel - to samo, co IShaderChannel
IPixelShaderChannel - to samo, co IShaderChannel plus możliwość pobrania RendererContext (klasa, która trzyma RendererContext, te stany odpowiadają 
                       potem za stan renderera OpenGL)

IUpdater - interfejs mający metodą DoUpdate( czas )
IValue - interfejs wartości od dowolnym typie (taki głupi IVariant) - nazwa, paramType oraz dane przechowywane jako char*

ShaderChannel - bazowa implementacja IShaderChannel

ShaderParamUpdater - klaska, która dziedziczy po IUpdater i odpowiada za aktualizację stanu (w tej chwili tylko uniform parameters) Shadera 
                     na podstawie parametrów pobranych z kanału shadera:
                     algorytm - przeiteruj IValue z shaderChannel->GetValuesList() 
                     pobierz parametry Shadera (ShaderParameters) i znajdź parametr o nazwie IValue::GetName() - istaw mu wartość taką, jak ma IValue::GetData()


Shader - składa się z updatera (ShaderParamUpdater), który potrafi ustawić jego parametry         
IModelNode - build scene, is visible
  BasicNode - dodawanie dzieci, dodawanie layerów, dodawanie pluginów, dużo niskopoziomowego śmiecia, które robi renderable (powinno być na zewnątrz)
              pobieranie shaderów (geom, pixel, vertex), tworzenie renderable effect jakąś niebyt wyrafinowaną metodą
              oraz RegisterShaderParameters do rejestrowania parametrów shadera
              
              
MVP, MV oraz P w GS i VS są rejestrowane z updaterami