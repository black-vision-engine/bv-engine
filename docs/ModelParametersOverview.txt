Wszystkie parametry dziedzicz¹ po BaseParameter, który odpowiada za dodawanie referencji do tajmlajnów o raz nazwê

    ParamTransform  - parametr owrapowuj¹cy CompositeTransform (takie ze skal¹, rotacj¹ i translacj¹, ale nie SQT tylko dowolnie i chuj)
    ParamMat2       - parametr owrapowuj¹cy Vec4Interpolator interpretowany jako macierz 2x2
    ParamVec4       - parametr owrapowuj¹cy Vec4Interpolator
    ParamVec3       - parametr owrapowuj¹cy Vec3Interpolator
    ParamFloat      - parametr owrapowuj¹cy FloatInterpolator
    
Gdzie s¹ przechowywane modele:

    PixelShaderChannel      - wektor paramtransform - do tekstur oraz dowolne inne (np. float)
    SimpleTransformChannel  - wektor paramtransform - transformacje w przestrzeni modelu
    Plugin                  - dowolne, które jakoœ steruj¹ stanem
    TextureInfo             - alfa, border color, param transform (transformacja dla tej tekstury)
    
Modele - rodzaje:

    SimpleTransformChannel  - wektor paramtransformów
    PixelShaderChannel      - wektor paramtransformów jako macierze tekstury oraz dodatkowe dowolne inne steruj¹ce (uniformy)
    
    
Na stan modelu sk³adaj¹ siê:
  Parametry - interpolowane
  Vaulesy - wyniki ewaluacji parametrów
  Stany struktur poœrednich (np vertexattributesarray, która ma StateChanged).
  
Plugin powinien sam byæ w stanie utworzyæ swoje wszystkie kana³y na bazie poprzedniego pluginu.

SimpleAnimationPlugin

ShaderChannel - przechowuje swój stan dynamiczny (wartoœci) oraz statyczny (parametry i ich typy) oraz na podstawie 
tego stanu statycznego powinien byæ w stanie wygenerowaæ kod shadera na dan¹ architekturê (u nas OpenGL) - w tym momencie to
siê sprowadza do wczytania kodu shadera z pliku.

Kana³y transformacji:
    TransformChannel:
        Ma w sobie mo¿liwoœæ zwrócenia wektora transformacji
    SimpleTransformChannel:
        dodatkowo ma w sobie model z parametrem opisuj¹cym transformacjê po stronie modelu (teraz ta gówniana, docelowo SQT)

ShaderChannels:
    VertexShaderChannel
        TextureVertexShaderChannel - ma tylko kod shadera (z pliku)
    PixelShaderChannel
        SolidColorPixelShaderChannel - ma tylko parametr z kolorem (vec4)
        TextPixelShaderChannel - ma tylko parametrz kolorem (vec4)
        TexturePixelShaderChannel - ma w sobie listy parmetrów (alfy, transformacje, border kolory)
    GeometryShaderChannel
        ExtrudeGemoetryShaderChannel - ma w sobie tylko parametr ze skal¹

VertexAtrributeChannels:
    Tutaj trzeba przemyœleæ dok³adnie strukturê i minimalne API, które powinno byæ zaimplementowane po stronie takiego kana³u
    To jest jedyny kana³, który dostarcza dane w postaci du¿ych chunków pamiêci - pozosta³e kana³y dostarczaj¹ tylko i wy³¹cznie
    uniformy (parametry po stronie modelu), które s¹ potem interpretowane przez shadery (i ewentualnie na ich podstawie kana³y coœ
    tam sobie potrafi¹ zbudowaæ)
    
No to wracaj¹c do logiki i modeli (parametry w pluginach):
    Po pierwsze pluginy nie powinny pobieraæ w konstruktorach ¿adnych parametrów !!! Pluginy mog¹ zwracaæ parametry, które udostêpniaj¹
    ale podawanie tych parametrów przez konstruktor to jest przepomyUka - i tak byæ nie powinny w ¿yciu i nigdy.
    
Jak¹ logikê maj¹ w sobie kana³y tak naprawdê:
    TransformChannel - przelatuje listê transfor paramów i robi SetMatrix( Evaluate( kana³, czas ) ) - nie ró¿ni siê niczym od mat4 value
    TexturePixelShaderChannel - SetValue( Evaluate( ... ) ) na alfach i macierzech (valiusem jest mat4val) - czyli nic dupourywaj¹cego
    SolidColorPixelShaderChannel - SetValue( Evaluate( ... ) ) na kolorze
    ExtrudeGeometryChannel - SetValue( WEvaluate( ... ) ) na skali
    VertexAttributesChannel - ¿adnej, tylko rutuje Update do konekted komponentu
    
    
    
    