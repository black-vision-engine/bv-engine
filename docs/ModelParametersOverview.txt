Wszystkie parametry dziedziczą po BaseParameter, który odpowiada za dodawanie referencji do tajmlajnów o raz nazwę

    ParamTransform  - parametr owrapowujący CompositeTransform (takie ze skalą, rotacją i translacją, ale nie SQT tylko dowolnie i chuj)
    ParamMat2       - parametr owrapowujący Vec4Interpolator interpretowany jako macierz 2x2
    ParamVec4       - parametr owrapowujący Vec4Interpolator
    ParamVec3       - parametr owrapowujący Vec3Interpolator
    ParamFloat      - parametr owrapowujący FloatInterpolator
    
Gdzie są przechowywane modele:

    PixelShaderChannel      - wektor paramtransform - do tekstur oraz dowolne inne (np. float)
    SimpleTransformChannel  - wektor paramtransform - transformacje w przestrzeni modelu
    Plugin                  - dowolne, które jakoś sterują stanem
    TextureInfo             - alfa, border color, param transform (transformacja dla tej tekstury)
    
Modele - rodzaje:

    SimpleTransformChannel  - wektor paramtransformów
    PixelShaderChannel      - wektor paramtransformów jako macierze tekstury oraz dodatkowe dowolne inne sterujące (uniformy)
    
    
Na stan modelu składają się:
  Parametry - interpolowane
  Vaulesy - wyniki ewaluacji parametrów
  Stany struktur pośrednich (np vertexattributesarray, która ma StateChanged).
  
Plugin powinien sam być w stanie utworzyć swoje wszystkie kanały na bazie poprzedniego pluginu.

SimpleAnimationPlugin

ShaderChannel - przechowuje swój stan dynamiczny (wartości) oraz statyczny (parametry i ich typy) oraz na podstawie 
tego stanu statycznego powinien być w stanie wygenerować kod shadera na daną architekturę (u nas OpenGL) - w tym momencie to
się sprowadza do wczytania kodu shadera z pliku.

Kanały transformacji:
    TransformChannel:
        Ma w sobie możliwość zwrócenia wektora transformacji
    SimpleTransformChannel:
        dodatkowo ma w sobie model z parametrem opisującym transformację po stronie modelu (teraz ta gówniana, docelowo SQT)

ShaderChannels:
    VertexShaderChannel
        TextureVertexShaderChannel - ma tylko kod shadera (z pliku)
    PixelShaderChannel
        SolidColorPixelShaderChannel - ma tylko parametr z kolorem (vec4)
        TextPixelShaderChannel - ma tylko parametrz kolorem (vec4)
        TexturePixelShaderChannel - ma w sobie listy parmetrów (alfy, transformacje, border kolory)
    GeometryShaderChannel
        ExtrudeGemoetryShaderChannel - ma w sobie tylko parametr ze skalą

VertexAtrributeChannels:
    Tutaj trzeba przemyśleć dokładnie strukturę i minimalne API, które powinno być zaimplementowane po stronie takiego kanału
    To jest jedyny kanał, który dostarcza dane w postaci dużych chunków pamięci - pozostałe kanały dostarczają tylko i wyłącznie
    uniformy (parametry po stronie modelu), które są potem interpretowane przez shadery (i ewentualnie na ich podstawie kanały coś
    tam sobie potrafią zbudować)
    
No to wracając do logiki i modeli (parametry w pluginach):
    Po pierwsze pluginy nie powinny pobierać w konstruktorach żadnych parametrów !!! Pluginy mogą zwracać parametry, które udostępniają
    ale podawanie tych parametrów przez konstruktor to jest przepomyUka - i tak być nie powinny w życiu i nigdy.
    
Jaką logikę mają w sobie kanały tak naprawdę:
    TransformChannel - przelatuje listę transfor paramów i robi SetMatrix( Evaluate( kanał, czas ) ) - nie różni się niczym od mat4 value
        Oraz dodatkowo na zewaluowanym stanie robi konkatenację z ewentualnym stanem z poprzedniego pluginu
    TexturePixelShaderChannel - SetValue( Evaluate( ... ) ) na alfach i macierzech (valiusem jest mat4val) - czyli nic dupourywającego
    SolidColorPixelShaderChannel - SetValue( Evaluate( ... ) ) na kolorze
    ExtrudeGeometryChannel - SetValue( WEvaluate( ... ) ) na skali
    VertexAttributesChannel - żadnej, tylko rutuje Update do konekted komponentu - czyli nic tu się nie dzieje, bo ten kanał i tak jest
                              budowany od zera przez plugin w jego apdejcie lub apdejcie CC - i chuj
    VertexAttributesChannelAnimatedVertices - odpala update CC
    ConnectedComponent - nie ma żadnej logiki w apdejcie
    AnimatedStripComponent - animuje poszczególne vertexy
    RectComponent - nic nie ma
    RingComponent - nic nie ma
    VariableTopologyStripComponent - Dodaje kolejne wertexy do geometrii - nic szczzególnego, ale taki apdejt
    
   
                              
    
    
    
    
    