/**@page ExtendingEngine_CreatingLogics Creating Logics

[TOC]

@section ExtendingEngine_CreatingLogics_Model Logic Model

Logics can use parameter model the same way as @ref ExtendingEngine_CreatingPlugins_CreatingModel_PluginModel "Plugins".
Main difference is, that Logics have only one @ref bv::model::DefaultParamValModel. There are no models with special
meaning and parameters aren't forwarded anywhere.

Derive your Logics from bv::model::NodeLogicBase class, if you want to use @ref Parameters. This class
implements model serialization and deserialization. Remember to call @ref bv::model::NodeLogicBase::Update
if you override Update function.

<b>Example model initialization: (@ref bv::nodelogic::Cloner)</b>

@code
// ***********************
//
Cloner::Cloner             ( bv::model::BasicNodeWeakPtr parent, bv::model::ITimeEvaluatorPtr timeEvaluator )
    : m_parentNode( parent )
    , m_updatePositionsNeeded( true )
    , m_updateClonesNeeded( true )
{
    model::ModelHelper h( timeEvaluator );
    h.SetOrCreatePluginModel();

    h.AddSimpleParam( PARAMETERS::N_ROWS, 1, true, true );
    h.AddSimpleParam( PARAMETERS::N_COLS, 1, true, true );
    h.AddSimpleParam( PARAMETERS::DELTA, glm::vec3( 0.f, 0.f, 0.f ), true, true );
    h.AddSimpleParam( PARAMETERS::RENAME_SUBTREE, false, true, true );
    h.AddSimpleParam( PARAMETERS::REMOVE_EXCESS, false, true, true );
    h.AddEnumParam< ClonerPlaneType >( PARAMETERS::PLANE_TYPE, ClonerPlaneType::CPT_XY, true, true );

    m_paramValModel = std::static_pointer_cast< model::DefaultParamValModel >( h.GetModel()->GetPluginModel() );

    m_numRows = model::GetValueParamState< Int32 >( m_paramValModel.get(), PARAMETERS::N_ROWS );
    m_numCols = model::GetValueParamState< Int32 >( m_paramValModel.get(), PARAMETERS::N_COLS );
    m_delta = model::GetValueParamState< glm::vec3 >( m_paramValModel.get(), PARAMETERS::DELTA );
    m_renameSubtree = model::GetValueParamState< bool >( m_paramValModel.get(), PARAMETERS::RENAME_SUBTREE );
    m_removeExcees = model::GetValueParamState< bool >( m_paramValModel.get(), PARAMETERS::REMOVE_EXCESS );
    m_planeType = model::GetValueParamState< ClonerPlaneType >( m_paramValModel.get(), PARAMETERS::PLANE_TYPE );
}
@endcode


@section ExtendingEngine_CreatingLogics_HandleEvent Implement HandleEvent

Logic can execute commands from API using bv::model::INodeLogic::HandleEvent function.
Function gets bv::IDeserializer in parameter from which Logic can extract generic command parameters.
Commands name is set in <b>Action</b> parameter. Rest of content of bv::IDeserializer is Logic specific.

Logic can return response in bv::ISerializer passed as second parameter.

<b>Example:</b>
@code
// ***********************
//
bool                        Cloner::HandleEvent     ( IDeserializer & eventDeser, ISerializer & /*response*/, BVProjectEditor * /*editor*/ )
{
    std::string action = eventDeser.GetAttribute( "Action" );

    if( action == Cloner::ACTION::REGENERATE )
        Regenerate();
    else if( action == Cloner::ACTION::REMOVE_ONLY_EXCESS )
        RemoveExcessNodes();
    else if( action == Cloner::ACTION::REMOVE_ALL_CLONES )
        RemoveClones();
    else
        return false;

    return true;
}
@endcode


@section ExtendingEngine_CreatingLogics_UpdateHooks Implement update hooks

There are 3 update functions that Logic can reimplement:
- @ref bv::model::INodeLogic::PreNodeUpdate
- @ref bv::model::INodeLogic::Update
- @ref bv::model::INodeLogic::PostChildrenUpdate

Check @ref NodeLogics_Update "here", when these functions are called in update phase. You can check
implementation of function bv::model::BasicNode::Update either.

Which function to choose, depends on functionality you want to implement. For example:
- @ref bv::model::INodeLogic::PreNodeUpdate "PreNodeUpdate" Could be used when we want update Node's transformation parameters.
We must do it before Plugins are be updated. Example is @ref bv::nodelogic::Follow.
- @ref bv::model::INodeLogic::Update "Update" Use when you want to manipulate Node's subtree. This function is invoked
before children update. Example is @ref bv::nodelogic::Cloner.
- @ref bv::model::INodeLogic::PostChildrenUpdate "PostChildrenUpdate" Use when your depends on bounding box update of node's subtree.
Example is @ref bv::nodelogic::MaxSize.


@section ExtendingEngine_CreatingLogics_ManipulatingNodes Manipulating nodes

Sometimes Logic needs to remember Nodes in it's subtree. When implementing such Logic, we must remember, that
Nodes' structure can change during execution. Changes can come from editor or other Logic manipulating tree.
Thats the reason, why Logic should listen to events notifying tree changes like @ref bv::NodeRemovedEvent and bv::NodeMovedEvent
(or maybe bv::NodeAddedEvent).

<b>Example:</b>

@code
// ***********************
//
void        AnalogWatch::Initialize        ()
{
    GetDefaultEventManager().AddListener( fastdelegate::MakeDelegate( this, &AnalogWatch::NodeRemovedHandler ), NodeRemovedEvent::Type() );
    GetDefaultEventManager().AddListener( fastdelegate::MakeDelegate( this, &AnalogWatch::NodeMovedHandler ), NodeMovedEvent::Type() );
}

// ***********************
//
void        AnalogWatch::Deinitialize      ()
{
    GetDefaultEventManager().RemoveListener( fastdelegate::MakeDelegate( this, &AnalogWatch::NodeRemovedHandler ), NodeRemovedEvent::Type() );
    GetDefaultEventManager().RemoveListener( fastdelegate::MakeDelegate( this, &AnalogWatch::NodeMovedHandler ), NodeMovedEvent::Type() );
}

@endcode

Example implementation of these handlers can be found in @ref bv::nodelogic::AnalogWatch::NodeRemovedHandler "bv::nodelogic::AnalogWatch::NodeRemovedHandler".

@section ExtendingEngine_CreatingLogics_Factory Registering Logics in factory

To use Logic you have to register create function in bv::NodeLogicFactory.
Example registrations are placed in bv::NodeLogicFactory::RegisterDefaultLogics.

@see LogicsList, @ref NodeLogics
*/