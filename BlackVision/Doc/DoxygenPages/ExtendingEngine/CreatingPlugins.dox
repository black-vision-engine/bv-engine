/**@page ExtendingEngine_CreatingPlugins Creating Plugins

[TOC]


@section ExtendingEngine_CreatingPlugins_CreatingModel Creating Model

Plugin Model is set of parameters that can be modified by user through @ref API_Documentation "API".

@subsection ExtendingEngine_CreatingPlugins_CreatingModel_ParamsValuesState Params, Values, State

@ref Parameters "Parameter" is set of keys, which can be evaluated thanks to @ref Timelines "Timeline" attached to them.
In each frame we can get Timeline's time and evaluate Parameter at this point in time.
Parameter can be evaluated manually by user in update function or it can be evaluated automatically. Automatic evaluation
happens when Parameter has Value attached to it. Value contains value of parameter evaluated in frame.
Sometimes we want to know that parameter value changed to make some action. For that purpose we can use State.

@subsection ExtendingEngine_CreatingPlugins_CreatingModel_PluginModel Creating Plugin Parameter Model

Plugin Parameter model is created in Plugin descriptor. @ref bv::model::DefaultPluginParamValModel class
contains multiple @ref bv::model::DefaultParamValModel objects for different purposes.
- <b>VertexShaderChannelModel and PixelShaderChannelModel</b> are used to pass parameters to shaders
as uniforms.
- <b>TransformChannelModel</b> contains Node's local transformation. (Used only by @ref bv::model::DefaultTransformPlugin "TransformPlugin")
- <b>VertexAttributesChannelModel</b> contains geometry parameters.
- <b>GeometryShaderChannelModel</b> is for future use with geometry shaders.
- <b>PluginModel</b> contains other parameters not connected to any of functionalities above.

To create model use @ref bv::model::ModelHelper class, which helps create @ref Parameters "Parameters", Values and States.
It is initialized with default timeline that will be attached to all parameters.

ModelHelper has set of functions to create Parameters of different types. Parameters are added to current model channel.
To choose current model use one of functions:
- @ref bv::model::ModelHelper::SetOrCreateVacModel "SetOrCreateVacModel"
- @ref bv::model::ModelHelper::SetOrCreateVSModel "SetOrCreateVSModel"
- @ref bv::model::ModelHelper::SetOrCreatePSModel "SetOrCreatePSModel"
- @ref bv::model::ModelHelper::SetOrCreateGSModel "SetOrCreateGSModel"
- @ref bv::model::ModelHelper::SetOrCreatePluginModel "SetOrCreatePluginModel"

After choosing model, you can add parameters with (for example) template function @ref bv::model::ModelHelper::AddSimpleParam "AddSimpleParam".
Function takes:
- parameter name
- default value
- flag indicating that we want create Value
- flag indicating that we want create State

Note that if we create State, we always need to add Value too.

@section ExtendingEngine_CreatingPlugins_RegisterDescriptor Register Plugin Descriptor

To create plugin, we must first register it's descriptor in @ref bv::model::PluginsManager.
Example registration can be found in function bv::model::DefaultBVPluginDescriptors in file DefaultPlugins.cpp.

@section ExtendingEngine_CreatingPlugins_Channels Plugin Channels

Plugins generate their output to channels:
- TransformChannel
- VertexAttributesChannel
- PixelShaderChannel
- VertexShaderChannel
- AudioChannel

In most cases only <b>VertexAttributesChannel</b> and <b>PixelShaderChannel</b> are important.

- <b>VertexAttributesChannel</b> contains geometry generated by @ref Plugins "Plugin".
To process geometry, Plugin can take content of this channel from previous Plugin 
and generate own geometry based on it.
- <b>PixelShaderChannel</b> contains textures.


*/