Rodzaje projektów:
- CoreLib - 	główny katalog 			- dowolna z głównych bibliotek, może zależeć tylko od innech CoreLibs lub Dep/3rdParty
- ToolLib - 	katalog Tools  			- może zależeć od dowolnej CoreLib, dowolnego Toola lub Dep/3rdParty
- ToolApp - 	katalog Tools  			- może zależeć od dowolnej CoreLib, dowolnego Toola lub Dep/3rdParty
- Test - 		latalog Test   			- może zależeć od dowolnej CoreLib, dowolnego Toola lub Dep/3rdParty
- Application - katalog Applications	- może zależeć od dowolnej CoreLib, dowolnego Toola lub Dep/3rdParty, być może też od innej aplikacji

Usprawnienia:

zmienić położenie i nazewnictwo na jakieś ustalone lib boost i korzystać tylko z BOOST_LIB_DIR
  + globalny dep od boosta
sensownie zrobić depy od libek (z ifami, będzie wypas)
post buid step można zrobić na bazie ustawień aktualnej konfiguracji

zmienić nazwę mipmapbuilder na libmipmapbuilder

poprawić templatki adekwatnie - domyślnie każda z App ma w lib depach katalog output (jeśli to będzie potrzebne, bo może okaże się zbędne)

3rdPartyInc.props - katalogi z includem do third party oraz do boosta
3rdPartyLib.props - katalogi do libów z third party oraz do odpowiednio nazwanego boosta oraz libki jako takie (z ifami)

oraz pewnie 
ToolsInc - i duże includy składać z takich kawałków
TestInc

ToolsLib - - jeśli będzie taka potrzebna, bo to powinny załatwić referencje i depy
TestLib - jeśli będzie taka potrzebna, bo to powinny załatwić referencje i depy

być może conditional na Preprocesor (zamiast czterech różnych to wersja z conditionalem w jednym pliku)

CommonLib chyba może również wylecieć - to w apps i test jest
LibCommon.props wydaje się zbędne - jeśli tak jest, to wywalić

poprawić docelowe katalogi budowania testów, bo teraz test asset manager się kopiuje do katalogu głównego, zamiast do Test
wobec tego porównać oba projekty z testami i sprawdzić, czym się tak naprawdę różnią !!!!!!!!!!!!!!

test asset manager przechodzi tylko w debug x64
test mipmap builder w ogóle nie przechodzi
zmienić  nazwę  mipmapbuilder na libmipmapbuilder

prefix w Source dla każdego projektu: Source/<prefix_name>/dopiero tutaj kod
dodatkowo prefix dla katalogu - ten prefix załatwia sprawę

../../../Source jako domyślny includ w commmon, jeśli lib $(OutputDir) będzie potrzebny, to też do common

dobrze przemyśleć makra
na tej podstawie najpewniej da się zrobić wszystko znacznie mniejszą liczbą plików (tylko odpowiednio ustawiać warunki)
http://manski.net/2012/01/sharing-project-properties-in-visual-c/#custom-variables-.28a.k.a.-macros.29
https://msdn.microsoft.com/en-us/library/ms171481.aspx


OPISAĆ KONFIGURACJĘ BOOST
OPISAĆ NA CZYM POLEGA DZIAŁANIE BVGL

WRZUCIĆ ten nowe komendy rysujące do BVGL (najwyżej się nie przydadzą)

Opisać, że nie całe 3rdPartyLib.props nie widać podczas edycji z poziomu IDE (Conditional props są niewidoczne)
To samo dotyczy common.props i <PreprocessorDefinitions> dla symboli _DEBUG, NDEBUG
3rdPartyDepLib filez:

Napisać o tym, że LibBlackVision ma w sobie wszystkie pozostałe core libsy oraz Tool Libsy i nie trzeba ich referencjonować w projektach.
To w ogólnym opisie konfiguracji projektu.

Ponadto napisać o tym, że Common_Core daje kategorię CoreLibs oraz to samo zrobić w strukturze projektu, ewentualnie dodać (tak jak w jakimś z projektów
taki builder all.sln czy coś takiego - to może być w xercesie lub analogicznym projekcie)

uspójnić nazwy bibliotek w trybach debug (albo _D albo D, a nie przemieszane)

Pytanie - czy warto dodać do solucji "Core" jako filtr na te główne biblioteki?


win32-Debug

sqliteD.lib
hashlib2plusD.lib
freetype250_D.lib
opengl32.lib
glu32.lib
glew32s.lib
FreeImage.lib
libboost_filesystem.lib
libboost_system.lib
libboost_thread.lib
libboost_serialization.lib
winmm.lib

x64-Debug

sqliteD.lib
hashlib2plusD.lib
freetype250_D.lib
opengl32.lib
glu32.lib
glew32s.lib
FreeImage.lib
libboost_filesystem.lib
libboost_system.lib
libboost_thread.lib
libboost_serialization.lib
winmm.lib


win32-Release

sqlite.lib
hashlib2plus.lib
freetype250.lib
opengl32.lib
glu32.lib
glew32s.lib
FreeImage.lib
libboost_filesystem.lib
libboost_system.lib
libboost_thread.lib
libboost_serialization.lib
winmm.lib

x64-Release

sqlite.lib
hashlib2plus.lib
freetype250.lib
opengl32.lib
glu32.lib
glew32s.lib
FreeImage.lib
libboost_filesystem.lib
libboost_system.lib
libboost_thread.lib
libboost_serialization.lib
winmm.lib


DLL copy configurations:

win32-Debug

	xcopy $(ThirdPartyDir)\FreeImage\Wrapper\FreeImagePlus\dist\x64\FreeImagePlusd.dll $(OutDir) /c /y
	xcopy $(ThirdPartyDir)\FreeImage\Dist\x64\FreeImage.dll $(OutDir) /c /y
	mkdir $(OutDir)\Assets > nul  2> nul
	xcopy $(AssetsDir) $(OutDir)\Assets /e /c /y

	xcopy $(ThirdPartyDir)\FreeImage\Wrapper\FreeImagePlus\dist\Win32\FreeImagePlusd.dll $(OutDir) /c /y
	xcopy $(ThirdPartyDir)\FreeImage\Dist\Win32\FreeImaged.dll $(OutDir) /c /y
	xcopy $(ThirdPartyDir)\FreeImage\Dist\Win32\FreeImage.dll $(OutDir) /c /y
	mkdir $(OutDir)\Assets > nul  2> nul
	xcopy $(AssetsDir) $(OutDir)\Assets /e /c /y

win32-Release

	xcopy $(ThirdPartyDir)\FreeImage\Wrapper\FreeImagePlus\dist\x64\FreeImagePlusd.dll $(OutDir) /c /y
	xcopy $(ThirdPartyDir)\FreeImage\Dist\x64\FreeImage.dll $(OutDir) /c /y
	mkdir $(OutDir)\Assets > nul  2> nul
	xcopy $(AssetsDir) $(OutDir)\Assets /e /c /y


x64-Debug

	xcopy $(ThirdPartyDir)\FreeImage\Wrapper\FreeImagePlus\dist\x64\FreeImagePlusd.dll $(OutDir) /c /y
	xcopy $(ThirdPartyDir)\FreeImage\Dist\x64\FreeImage.dll $(OutDir) /c /y
	mkdir $(OutDir)\Assets > nul  2> nul
	xcopy $(AssetsDir) $(OutDir)\Assets /e /c /y

	
x64-Release

	xcopy $(ThirdPartyDir)\FreeImage\Wrapper\FreeImagePlus\dist\x64\FreeImagePlusd.dll $(OutDir) /c /y
	xcopy $(ThirdPartyDir)\FreeImage\Dist\x64\FreeImage.dll $(OutDir) /c /y
	mkdir $(OutDir)\Assets > nul  2> nul
	xcopy $(AssetsDir) $(OutDir)\Assets /e /c /y
