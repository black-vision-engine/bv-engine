Pamięć w teksturach jest jawnie przechowywana w dwóch klasach:

Texture2DImpl
Texture2DSequenceImpl

Żadna z nich nie powinna być właścicielem pamięci, którą trzyma. Allocate Memory nie powinno istnieć w teksturze - tekstura
to nie manager pamięci, więc jeśli nie jest właścicielem pamięci, którą przechowuje, to po co ma sztucznie udostępniać
metody do tworzenia chunków, które potem przejmuje ktoś inny.

Miejsca, w których pamięć jest przekazywana do tekstur:

1. Podczas ładowania w pluginie (Texture, Animation, Text)
  a dalej to trafia do TextureManagera::LoadTexture
2. Podczas updatera, jeśli coś się zmieniło w pamięci (jakoś została podmieniona) - BitsChanged w deskryptorze - sprawdzić NodeUpdater::UpdateTexturesData  ()
3. Podczas tworzenia textury w Effect2D


Testy: 
1. Przewalenie całości (wywalić write bits, wywalić allocate memory)
2. Przetestowanie w wersji z RenderTargetami i GreenRectem (wtedy sprawdzamy od razu mechanizm readbacków) - sprawdzone
3. Test na teksturze - sprawdzone
4. Test na animacji - sprawdzone
5. Test na tekście - sprawdzone
6. Commit do default - sprawdzone

I kolejne kroki czyli keszowanie najpierw deskryptorów, a potem po przemyśleniu tekstur 2D. Tylko trzeba to dobrze przemyśleć.

Uwagi:

LoadTexture powinno zwracać już wczytane dane, a nie tworzyć teksturę od nowa:

DefaultTextureDescriptor::LoadTexture() pobiera handla, który ma w sobie dane. Te dane powinny być użyte po raz kolejny, jeśli
taka teksturka już była wczytana. Czyli IPluginResourceDescriptorConstPtr powinno być trzymane w cache na bazie handle/name (to jest
potencjalne marnotrawstwo, bo można mieć tego samego handla i różne nazwy, ale u nas to się generalnie nie zdarzy, a nie ma
co teraz wymyślać pełnego mechanizmu).

Docelowo należy tak to keszować, żeby jedna pamięć mogła występować pod kilkoma nazwami.
Być może w silniku należy trzymać tekstury Pdr nie jako wartości, których kluczami są Texture2D, a raczej pamięć w tych teksturach lub jakieś ID.

A tak naprawdę to cały mechanizm zasobów trzeba będzie bardzo dokładnie przemyślec. Kto i kiedy ładuje, kto jest właścicielem pamięci,
kiedy najszybciej można bezpiecznie zwolnić daną pamięć z hosta i/lub GPU, resety device, resety silnika/modelu.

W TextureManager.cpp w LoadTexture jest jawnie tworzona tekstura 2d impl, więc to tutaj teoretycznie jest pierwsze miejsce, gdzie
można trzymać skeszowane tekstury 2D (a przynajmniej te, które są typu static). Sprawdzić, jak często tutaj wchodzi program podczas działania.
ANO W OGÓLE NIE WCHDZI, więc to do dupy pomysł.

To samo należy sprawdzić w przypadku TextureManager::AddFrame