W tym momencie każdy kanał jest śmietnikiem, który ma pomieszaną logikę, stan i ewentualnie jakieś odwołania do zewnętrznych obiektów, a to niekoniecznie
jest niezbędne, bo wiadomo, jaka jest struktura oraz jaki jest przepływ sterowania w każdym kanale. Stąd propozycja (bez podawania czy to mają być
interfejsy czy jakieś konkretne implementacje - to pewnie wyjdzie w praniu) takiego podziału implementacji pojedynczego kanału (strzałki oznaczają przepływ danych):

CHANNEL STRUCTURE AND LOGIC:

Previous Plugin ------> Assembler ------> State Snapshot
                            ^
                            |
                            |
                            |
                            |
                          Model

* State Snapshot to stan kanału w danym momencie (np. dla Transform Channel to będzie lista klasek Transform, dla VertexAttributesChannel to będzie
lista kanałów z atrybutami (vertex, uv, normal, itd.), jeszcze nie wiadomo dokładnie czym będzie ten stan dla shaderów, bo to jest temat rozwojowy.
Nie ma w sobie żadnej logiki

* Model - To jakaś implementacja modelu dla danego kanału (to jest komponent, może być dowolny i musi mieć możliwość ewaluacji w czasie t - metoda
Evaluate( t ) oraz publiczne API pozwalające dostać się do wyników tego obliczenia (zapewne wystarczy, że będzie to odpowiedni typ zwracany z
metody Evaluate).

* Previous Plugin - poprzedni na liście pluginów w danym węźle. W praktyce powinna wystarczyć lista kanałów poprzednika, ale może okazać się, że
potrzebne też są dane z samego plugina, więc ten wskaźnik akurat można tu trzymać. Logika taka, jak normalnie w pluginie.

* Assembler - klasa odpowiedzialna za logikę konwertowania wyniku ewaluacji modelu w danym czasie na State Snapshot. Moze mieć swoje jakieś parametry
niezależne od modelu, ale zależne od ustawień silnika (nie wiem w tej chwili, jakie mogą być, ale taki stan raczej warto trzymać nawet dla debugu).
Na bazie modelu i poprzedniego plugina w danym czasie t potrafi wygenerować State Snapshot dla danego kanału. Warto mieć dostęp do całego poprzedniego
plugin, żeby mieć możliwość generowania bogatszej palety wyników (np. lokalne przekształcenie VertexAttributów w taki sposób, żeby zerowało się
z przekształceniami z poprzednich kanałów - to oczywiście ma mały sens praktyczny, ale dzięki dostępowi do danych tak się to właśnie da
zrobić.